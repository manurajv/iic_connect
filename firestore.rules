rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User collection rules
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null;
      allow update, delete: if request.auth != null && 
                           (request.auth.uid == userId || 
                            isAdminUser());
    }
    
    // Academic collections (batches, faculty, classes, courses, subjects)
    match /batches/{batchId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdminUser();
    }
    
    match /faculty/{facultyId} {
      allow create: if request.auth != null && 
                   request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null;
      allow update, delete: if isAdminUser() || 
                           (request.auth != null && 
                            request.auth.uid == resource.data.userId);
    }
    
    match /classes/{classId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdminUser();
    }
    
    match /courses/{courseId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdminUser() || isFacultyUser();
    }
    
    match /subjects/{subjectId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdminUser() || isFacultyUser();
    }
    
    // Enrollment collection
    match /enrollments/{enrollmentId} {
      allow create: if isStudentUser() && 
                    request.resource.data.studentId == request.auth.uid;
      
      allow read: if request.auth != null;
      
      allow update, delete: if isAdminUser() || isStaffUser();
    }

    
    // Attendance collection rules
    match /attendance/{attendanceId} {
      allow read: if request.auth != null && 
                   (request.auth.uid == resource.data.studentId || 
                    request.auth.uid == resource.data.facultyId ||
                    isAdminUser());
      
      allow create: if request.auth != null &&
                    (isFacultyUser() || isAdminUser());
      
      allow update: if request.auth != null &&
                    (request.auth.uid == resource.data.facultyId ||
                     isAdminUser());
      
      allow delete: if request.auth != null && 
                   (isAdminUser() || 
                    request.auth.uid == resource.data.facultyId);
    }
    
    // Notice collection rules
    match /notices/{noticeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                     (isFacultyUser() || 
                      isStaffUser() || 
                      isAdminUser());
      allow update, delete: if request.auth != null && 
                           (request.auth.uid == resource.data.postedBy ||
                            isAdminUser());
    }
  
    // Timetable collection rules
    match /timetables/{timetableId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                   (isFacultyUser() || isAdminUser());
      allow update, delete: if request.auth != null && 
                          (request.auth.uid == resource.data.createdBy || 
                           isAdminUser());
    }
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if isAdminUser();
    }
    
    // Helper functions
    function isAdminUser() {
      return request.auth.token.isAdmin == true || 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isFacultyUser() {
      return request.auth.token.role == 'faculty' || 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }
    
    function isStaffUser() {
      return request.auth.token.role == 'staff' || 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'staff';
    }
    
    function isStudentUser() {
      return request.auth.token.role == 'student' || 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function hasRequiredAttendanceFields() {
      return request.resource.data.keys().hasAll([
        'subject', 'status', 'date', 'time', 'studentId'
      ]);
    }
    
    function validAttendanceData() {
      return request.resource.data.status is string &&
             request.resource.data.status in ['Present', 'Absent'] &&
             request.resource.data.date is string &&
             request.resource.data.time is string &&
             request.resource.data.studentId is string;
    }
    
    function allowedAttendanceUpdates() {
      return request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['status', 'date', 'time']);
    }
    
    function isValidBatchData() {
      return request.resource.data.keys().hasAll(['name']) &&
             request.resource.data.name is string;
    }
    
    function isValidClassData() {
      return request.resource.data.keys().hasAll(['name', 'batchId']) &&
             request.resource.data.name is string &&
             request.resource.data.batchId is string;
    }
    
    function isValidCourseData() {
      return request.resource.data.keys().hasAll(['name', 'code']) &&
             request.resource.data.name is string &&
             request.resource.data.code is string;
    }
    
    function isValidSubjectData() {
      return request.resource.data.keys().hasAll(['name', 'code', 'courseId', 'classId']) &&
             request.resource.data.name is string &&
             request.resource.data.code is string &&
             request.resource.data.courseId is string &&
             request.resource.data.classId is string;
    }
  }
}